#%RAML 1.0
---
################################
# Overview
################################

title: Index Exchange Buyer API
baseUri: https://market.indexexchange.com/api/{version}
version: v1
mediaType: application/json

################################
# Documentation
#   Documentation nodes containing explanations and workflows
################################

documentation:
    -   title: Index Market Terminology
        content: !include documentation/terminology.raml
    -   title: Workflow - Buy a Deal
        content: !include documentation/workflows/buy_deal.raml
    -   title: Workflow - Negotiate a Deal
        content: !include documentation/workflows/negotiate_deal.raml
    -   title: Workflow - Offer a new deal to specific parties (Targeted Proposal)
        content: !include documentation/workflows/target_deal.raml

################################
# Traits
#   These are reusable traits that can be applied in multiple nodes
################################

traits:
    auth_required:
        headers:
            X-Auth-ID:
                type: integer
                description: The current user's ID
            X-Auth-Token:
                type: string
                description: An OAuth token, obtained from the auth route #TODO: insert details/link when available
    pageable:
        queryParameters:
            limit:
                type: integer
                required: false
                displayName: Limit
                description: For paging, the maximum number of results to return. Must be a positive integer.
                minimum: 1
                maximum: 250
                default: 250 # ?
            offset:
                type: integer
                required: false
                displayName: Offset
                description: For paging, the page offset. This will be multiplied by `limit` to determine the set of results to return.
                minimum: 1
                default: 1


################################
# Object Definitions
################################

types:
    Contact:        !include types/contact.raml
    Deal:           !include types/deal.raml
    ActiveDeal:     !include types/active_deal.raml
    NegotiatedDeal: !include types/negotiated_deal.raml
    Response:       !include types/response.raml

################################
# Route Definitions
################################

/deals:
    /proposals:
        get:
            is: [ auth_required, pageable ]
            description: Retrieve available deals from Index Market. The returned objects describe terms available to purchase on a set of inventory. The terms may be purchased as-is, or counter-offers sent.
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
        put:
            is: [ auth_required ]
            description: Create a deal proposal in the IX system. Publisher(s) may accept as offered, or create a counter-offer. Only available to the proposal creator.
            body:
                type: Deal
            responses:
                201: # 201 = "Created"
    /negotiations:
        get:
            is: [ auth_required, pageable ]
            description: Retrieve current negotiation states for this user. Negotiation objects will display the current offered terms, with a reference to the original proposal. If no deals in negotiation are found, a 200 response code will still be sent. The data will be empty and the message will state that nothing could be found.
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                    # examples: 
                    #     ok:         !include examples/resources/deals/get_negotiation_ok.raml
                    #     no_content: !include examples/resources/deals/get_negotiation_no_content.raml
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
        put:
            is: [ auth_required ]
            description: |
                Send a counter-offer for, accept, or reject an existing deal in negotiation. Only allowed if the other negotiating party was the last to send an offer. 

                The request will be processed according to fields in the body JSON object. An object containing only the proposal_id, partner_id and response fields will accept or reject the negotiation accordingly.

                An object containing one or more of the negotiable deal fields will update the current negotiation state to the sent terms. Original proposal terms will be preserved.
            body:
                type: NegotiatedDeal
            # examples:
            #     counter-offer:  !include examples/resources/deals/put_negotiation_counter-offer.raml
            #     accept:         !include examples/resources/deals/put_negotiation_accept.raml
            #     reject:         !include examples/resources/deals/put_negotiation_reject.raml
            responses:
                201: # 201 = "Created"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
    /active:
        get:
            is: [ auth_required, pageable ]
            description: Retrieve deals that are currently active in the system for the current user.
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
        put:
            is: [ auth_required ]
            description: Accept a new deal, rendering it active in the system
            body:
                application/json:
                    properties:
                        proposal_id:
                            type: integer
                            required: true
                            minimum: 1
                            maximum: 16777215
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                404: # 404 = "Not found" provided package ID does not exist in the database
                500: # 500 = "Internal Server Error" something done broke

/users:
    /{user_id}:
        get:
            is: [ auth_required ]
            description: Retrieve contact information for a user by id.
            responses:
                200: # 200 = OK
                    body:
                        application/json:
                            type: Contact
                404: # 404 = User not found.