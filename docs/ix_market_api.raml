#%RAML 1.0
---
################################
# Overview
################################

title: Index Exchange Market API
baseUri: https://market.indexexchange.com/api/{version}
version: v1
mediaType: application/json

################################
# Documentation
#   Documentation nodes containing explanations and workflows
################################

documentation:
    -   title: 1.0 Overview and Terminology
        content: !include documentation/overview_terminology.raml
    -   title: 2.1 Accept a deal proposal as-is
        content: !include documentation/workflows/buy_deal.raml
    -   title: 2.2 Negotiate a Deal
        content: !include documentation/workflows/negotiate_deal.raml
    -   title: 2.3 Create a targeted proposal
        content: !include documentation/workflows/target_deal.raml
    -   title: 2.4 Create a proposal
        content: !include documentation/workflows/create_open_deal.raml

################################
# Traits
#   These are reusable traits that can be applied in multiple nodes
################################

traits:
    auth_required:
        headers:
            X-Auth-ID:
                type: integer
                description: The current user's ID
            X-Auth-Token:
                type: string
                description: An OAuth token, obtained from the auth route #TODO: insert details/link when available
    pageable:
        queryParameters:
            limit:
                type: integer
                required: false
                displayName: Limit
                description: For paging, the maximum number of results to return. Must be a positive integer.
                minimum: 1
                maximum: 250
                default: 250 # ?
            offset:
                type: integer
                required: false
                displayName: Offset
                description: For paging, the page offset. This will be multiplied by `limit` to determine the set of results to return.
                minimum: 1
                default: 1
    deal_filterable:
        queryParameters:
            auction_type:
                type: string
                required: false
                displayName: Auction Type
                description: The auction type of the proposal/negotiation/deal. Used to only obtain proposals/negotiations/deals of a specific auction type.
                enum: ['first','second','fixed']
            min_price:
                type: number
                required: false
                displayName: Min Price
                description: Minimum price for returned proposals/negotiations/deals
                minimum: 0.01
                maximum: 655.35
            max_price:
                type: number
                required: false
                displayName: Max Price
                description: Maximum price for returned proposals/negotiations/deals
                minimum: 0.01
                maximum: 655.35
            min_impressions:
                type: integer
                required: false
                displayName: Min Impressions
                description: The minimum number of impressions for returned proposals/negotiations/deals
                minimum: 1
                maximum: 16777215
            max_impressions:
                type: integer
                required: false
                displayName: Max Impressions
                description: The maximum number of impressions for returned proposals/negotiations/deals
                minimum: 1
                maximum: 16777215
            min_budget:
                type: integer
                required: false
                displayName: Min Budget
                description: The minimum budget for returned proposals/negotiations/deals
                minimum: 1
                maximum: 16777215
            max_budget:
                type: integer
                required: false
                displayName: Max Budget
                description: The maximum budget for returned proposals/negotiations/deals
                minimum: 1
                maximum: 16777215
            currency:
                type: string
                required: false
                displayName: Currency
                description: Specific currency for returned proposals/negotiations/deals
            min_start_date:
                type: date-only
                required: false
                displayName: Min Start Date
                description: The minimum start date for the returned proposals/negotiations/deals. Format is yyyy-mm-dd.
            max_start_date:
                type: date-only
                required: false
                displayName: Max Start Date
                description: The maximum start date for the returned proposals/negotiations/deals. Format is yyyy-mm-dd.
            min_end_date:
                type: date-only
                required: false
                displayName: Min End Date
                description: The minimum end date for the returned proposals/negotiations/deals. Format is yyyy-mm-dd.
            max_end_date:
                type: date-only
                required: false
                displayName: Max End Date
                description: The maximum end date for the returned proposals/negotiations/deals. Format is yyyy-mm-dd.
            keywords:
                type: string
                required: false
                displayName: Keywords
                description: A particular set of keywords that must be present in the returned proposals/negotiations/deals' names/descriptions. Multiple words are separated by spaces.


################################
# Annotation Declarations
################################

annotationTypes:
    not_implemented: boolean

################################
# Object Definitions
################################

types:
    Contact:                !include types/contact.raml
    ProposedDeal:           !include types/proposed_deal.raml
    ActiveDeal:             !include types/active_deal.raml
    NegotiatedDeal:         !include types/negotiated_deal.raml
    Response:               !include types/response.raml
    Partner:                !include types/partner.raml
    Owner:                  !include types/owner.raml
    ProposedDealCreate:     !include types/proposed_deal_create.raml
    NegotiatedDealCreate:   !include types/negotiated_deal_create.raml
    ActiveDealCreate:       !include types/active_deal_create.raml
    Section:                !include types/section.raml
    SectionCreate:          !include types/section_create.raml
    UrlMatch:               !include types/url_match.raml
    Site:                   !include types/site.raml
    SiteCreate:             !include types/site_create.raml
    Pagination:             !include types/pagination.raml

################################
# Route Definitions
################################

/deals:
    /proposals:
        get:
            is: [ auth_required, pageable, deal_filterable ]
            description: Retrieve available deals from Index Market. The returned objects describe terms available to purchase on a set of inventory. The terms may be purchased as-is, or counter-offers sent.
            queryParameters:
                # purchaseable:
                #     type: boolean
                #     required: false
                #     displayName: Purchaseable
                #     description: Flag indicating whether to only return proposals that are purchaseable/negotiable
                #     default: true
                owner_id:
                    type: integer
                    required: false
                    displayName: Owner ID
                    description: The ID owner of the proposal. Used to only obtain proposals that are owned by a specific user.
                    minimum: 1
                    maximum: 16777215
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
        put:
            (not_implemented): true
            is: [ auth_required ]
            description: Create a deal proposal in the IX system. Partner(s) may accept as offered, or create a counter-offer. Only available to the proposal creator.
            body:
                type: ProposedDealCreate
            responses:
                201: # 201 = "Created"
                    body:
                        application/json:
                            type: Response
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
        /{proposal_id}:
            uriParameters:
                proposal_id:
                    type: integer
                    required: true
                    description: The unique identifier for the proposal.
                    minimum: 1
                    maximum: 16777215
            get:
                is: [ auth_required ]
                description: Retrieve a specific proposal by its unique ID from Index Market.
                responses:
                    200: # 200 = "OK"
                        body:
                            application/json:
                                type: Response
                    401: # 401 = "Unauthorized" authentication has failed or was not provided
                    403: # 403 = "Forbidden" authentication successful but insufficient permissions
                    404: # 404 = "Not found" provided proposal ID does not exist in the database
                    500: # 500 = "Internal Server Error" something done broke
            put:
                (not_implemented): true
                is: [ auth_required ]
                description: Edit an already existing proposal in Index Market
                body:
                    application/json:
                        type: ProposedDealCreate
                responses:
                    200: # 200 = "OK"
                        body:
                            application/json:
                                type: Response
                    400: # 400 = "Bad Request" use for malformed requests
                    401: # 401 = "Unauthorized" authentication has failed or was not provided
                    403: # 403 = "Forbidden" authentication successful but insufficient permissions
                    404: # 404 = "Not found" provided proposal ID does not exist in the database
                    500: # 500 = "Internal Server Error" something done broke
            delete:
                (not_implemented): true
                is: [ auth_required ]
                description: Delete a specific proposal from Index Market
                responses:
                    200: # 200 = "OK"
                        body:
                            application/json:
                                type: Response
                    401: # 401 = "Unauthorized" authentication has failed or was not provided
                    403: # 403 = "Forbidden" authentication successful but insufficient permissions
                    404: # 404 = "Not found" provided proposal ID does not exist in the database
                    500: # 500 = "Internal Server Error" something done broke
    /negotiations:
        get:
            is: [ auth_required, pageable, deal_filterable ]
            description: Retrieve current negotiation states for this user. Negotiation objects will display the current offered terms, with a reference to the original proposal. If no deals in negotiation are found, a 200 response code will still be sent. The data will be empty and the message will state that nothing could be found.
            queryParameters:
                partner_id:
                    type: integer
                    required: false
                    displayName: Partner ID
                    description: The ID of the partner involved in the negotiation. Used to only obtain negotiations with a specific partner.
                    minimum: 1
                    maximum: 16777215
                status:
                    type: string
                    required: false
                    displayName: Status
                    description: The current status of the negotiation. Used to only obtain negotiations with a specific status.
                    enum: ["waiting_on_partner", "waiting_on_you", "no_status_no_class"]
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                    # examples: 
                    #     ok:         !include examples/resources/deals/get_negotiation_ok.raml
                    #     no_content: !include examples/resources/deals/get_negotiation_no_content.raml
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
        put:
            is: [ auth_required ]
            description: |
                Send a counter-offer for, accept, or reject an existing deal in negotiation. Only allowed if the other negotiating party was the last to send an offer. 

                The request will be processed according to fields in the body JSON object. An object containing only the proposal_id, partner_id and response fields will accept or reject the negotiation accordingly.

                An object containing one or more of the negotiable deal fields will update the current negotiation state to the sent terms. Original proposal terms will be preserved.
            body:
                type: NegotiatedDealCreate
            # examples:
            #     counter-offer:  !include examples/resources/deals/put_negotiation_counter-offer.raml
            #     accept:         !include examples/resources/deals/put_negotiation_accept.raml
            #     reject:         !include examples/resources/deals/put_negotiation_reject.raml
            responses:
                201: # 201 = "Created"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
        /{proposal_id}:
            uriParameters:
                proposal_id:
                    type: integer
                    required: true
                    description: The unique identifier for the proposal whose negotiations are requested.
                    minimum: 1
                    maximum: 16777215
            get:
                is: [ auth_required, pageable, deal_filterable ]
                description: Retrieve all negotiations associated with a specific proposal ID involving the current user.
                queryParameters:
                    partner_id:
                        type: integer
                        required: false
                        displayName: Partner ID
                        description: The ID of the partner involved in the negotiation. Used to only obtain negotiations with a specific partner.
                        minimum: 1
                        maximum: 16777215
                    status:
                        type: string
                        required: false
                        displayName: Status
                        description: The current status of the negotiation. Used to only obtain negotiations with a specific status.
                        enum: ["waiting_on_partner", "waiting_on_you", "no_status_no_class"]
                responses:
                    200: # 200 = "OK"
                        body:
                            application/json:
                                type: Response
                    400: # 400 = "Bad Request" use for malformed requests
                    401: # 401 = "Unauthorized" authentication has failed or was not provided
                    403: # 403 = "Forbidden" authentication successful but insufficient permissions
                    404: # 404 = "Not found" provided proposal does not exist in the database
                    500: # 500 = "Internal Server Error" something done broke
            /partner:
                /{partner_id}:
                    uriParameters:
                        partner_id:
                            type: integer
                            required: true
                            description: The unique identifier of the partner associated with the specified proposal.
                            minimum: 1
                            maximum: 16777215
                    get:
                        is: [ auth_required ]
                        description: Retrieve a specific negotiation associated with a specific proposal ID/partner ID combination for the current user.
                        responses:
                            200: # 200 = "OK"
                                body:
                                    application/json:
                                        type: Response
                            401: # 401 = "Unauthorized" authentication has failed or was not provided
                            403: # 403 = "Forbidden" authentication successful but insufficient permissions
                            404: # 404 = "Not found" negotiation/proposal/partner does not exist in the database
                            500: # 500 = "Internal Server Error" something done broke
                    delete:
                        (not_implemented): true
                        is: [ auth_required ]
                        description: Shortcut for rejecting a specific negotiation using a specific proposal ID/partner ID combination for the current user.
                        responses:
                            200: # 200 = "OK"
                                body:
                                    application/json:
                                        type: Response
                            401: # 401 = "Unauthorized" authentication has failed or was not provided
                            403: # 403 = "Forbidden" authentication successful but insufficient permissions
                            404: # 404 = "Not found" provided combination does not retrieve any negotiations
                            500: # 500 = "Internal Server Error" something done broke
    /active:
        get:
            is: [ auth_required, pageable, deal_filterable ]
            description: Retrieve deals that are currently active in the system for the current user.
            queryParameters:
                partner_id:
                    type: integer
                    required: false
                    displayName: Partner ID
                    description: The ID of the partner involved in the deal. Used to only obtain deals with a specific partner.
                    minimum: 1
                    maximum: 16777215
                dsp_id:
                    type: integer
                    required: true
                    displayName: DSP ID
                    description: DSP ID involved in the deal. Used to only obtain deals associated with a specific DSP.
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                500: # 500 = "Internal Server Error" something done broke
        put:
            is: [ auth_required ]
            description: Accept a new deal, rendering it active in the system
            body:
                type: ActiveDealCreate
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                404: # 404 = "Not found" provided proposal ID does not exist in the database
                500: # 500 = "Internal Server Error" something done broke
        /legacy:
            get:
                is: [ auth_required ]
                description: |
                     Get all active and paused deals of a publisher despite if they are created from Index Market. The request will be forwarded to Index Exchange API. 
                     Details about the response values could be found at http://www.indexexchange.com/api/#deals
                queryParameters:
                    userID:
                        type: integer
                        required: true
                        displayName: User ID
                        description: The ID of the publisher associated to the deals we want to get.
                        minimum: 1
                        maximum: 16777215
        /{proposal_id}:
            uriParameters:
                proposal_id:
                    type: integer
                    required: true
                    description: The unique identifier for the proposal whose deal(s) is/are requested.
                    minimum: 1
                    maximum: 16777215
            get:
                (not_implemented): true
                is: [ auth_required, pageable, deal_filterable ]
                description: Retrieve all active deals associated with a specific proposal ID involving the current user.
                queryParameters:
                    partner_id:
                        type: integer
                        required: false
                        displayName: Partner ID
                        description: The ID of the partner involved in the deal. Used to only obtain deals with a specific partner.
                        minimum: 1
                        maximum: 16777215
                    dsp_id:
                        type: integer
                        required: true
                        displayName: DSP ID
                        description: DSP ID involved in the deal. Used to only obtain deals associated with a specific DSP.
                responses:
                    200: # 200 = "OK"
                        body:
                            application/json:
                                type: Response
                    400: # 400 = "Bad Request" use for malformed requests
                    401: # 401 = "Unauthorized" authentication has failed or was not provided
                    403: # 403 = "Forbidden" authentication successful but insufficient permissions
                    404: # 404 = "Not found" provided proposal does not exist in the database
                    500: # 500 = "Internal Server Error" something done broke
            /partner:
                /{partner_id}:
                    uriParameters:
                        partner_id:
                            type: integer
                            required: true
                            description: The unique identifier of the partner associated with the specified proposal.
                            minimum: 1
                            maximum: 16777215
                    get:
                        (not_implemented): true
                        is: [ auth_required ]
                        description: Retrieve a specific active deal associated with a specific proposal ID/partner ID combination for the current user.
                        responses:
                            200: # 200 = "OK"
                                body:
                                    application/json:
                                        type: Response
                            401: # 401 = "Unauthorized" authentication has failed or was not provided
                            403: # 403 = "Forbidden" authentication successful but insufficient permissions
                            404: # 404 = "Not found" deal/proposal/partner does not exist in the database
                            500: # 500 = "Internal Server Error" something done broke
                    delete:
                        (not_implemented): true
                        is: [ auth_required ]
                        description: Shortcut for canceling a specific active deal using a specific proposal ID/partner ID combination for the current user.
                        responses:
                            200: # 200 = "OK"
                                body:
                                    application/json:
                                        type: Response
                            401: # 401 = "Unauthorized" authentication has failed or was not provided
                            403: # 403 = "Forbidden" authentication successful but insufficient permissions
                            404: # 404 = "Not found" provided proposal ID does not exist in the database
                            500: # 500 = "Internal Server Error" something done broke
/sections:
    get:
        (not_implemented): true
        is: [ auth_required ] #?
        description: Retrieve a filterable list of sections from the market.
        queryParameters:
            ad_units:
                type: string
                required: false
                displayName: Ad Units
                description: Only return sections that include these ad units. Ad units are defined as strings of format `<w>x<h>`, e.g. `728x90`. Multiple strings separated by spaces.
                example: 728x90 160x600
            countries:
                type: string
                required: false
                displayName: Countries
                description: Only return sections that include these countries. ISO ALPHA-3 country codes, separated by spaces.
                example: RUS ZAF
            entire_site:
                type: boolean
                required: false
                displayName: Entire Site
                description: Only return sections that include the entire site (true), or exclude entire-site sections (false).
            keywords:
                type: string
                required: false
                displayName: Keywords
                description: Search the name field for keywords. Multiple keywords separated by spaces.
                example: beans
            publisher_id:
                type: integer
                required: false
                displayName: Publisher ID
                description: Only return sections belonging to the publisher ID.
            url:
                type: string
                required: false
                displayName: URL
                description: Only return sections that include the URL or URL fragment in the main site domain (for `entire_site`) or in the `url_matches` array.
        responses:
            200: # 200 = "OK"
                body:
                    application/json:
                        type: Response
            400: # 400 = "Bad Request" use for malformed requests
            401: # 401 = "Unauthorized" authentication has failed or was not provided
            403: # 403 = "Forbidden" authentication successful but insufficient permissions
            404: # 404 = "Not found" no results
            500: # 500
    put:
        (not_implemented): true
        is: [ auth_required ]
        description: Create a new section in the market.
        body:
            type: SectionCreate
        responses:
            201: # 200 = "Created"
                body:
                    application/json:
                        type: Response
            400: # 400 = "Bad Request" use for malformed requests
            401: # 401 = "Unauthorized" authentication has failed or was not provided
            403: # 403 = "Forbidden" authentication successful but insufficient permissions
            500: # 500
    /{section_id}:
        uriParameters:
            section_id:
                type: integer
                required: true
                description: The unique identifier for a section.
                minimum: 1
                maximum: 16777215
        get:
            (not_implemented): true
            is: [ auth_required ] #?
            description: Retrieve a specific section by ID.
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                404: # 404 = "Not found" nothing found for this ID
                500: # 500
        put:
            (not_implemented): true
            is: [ auth_required ]
            description: Update a specific section by ID.
            body:
                type: SectionCreate
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                404: # 404 = "Not found" no results
                500: # 500
        delete:
            (not_implemented): true
            is: [ auth_required ]
            description: Delete a section by ID.
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                404: # 404 = "Not found" no results
                500: # 500

/sites:
    get:
        (not_implemented): true
        is: [ auth_required ] #?
        description: Retrieve a filterable list of sites from the market.
        queryParameters:
            min_cpm:
                type: number
                required: false
                displayName: Min CPM
                description: Only return sites with more than this average CPM
            max_cpm:
                type: number
                required: false
                displayName: Max CPM
                description: Only return sites with less than this average CPM
            min_impressions:
                type: integer
                required: false
                displayName: Min Impressions
                description: Only return sites with more than this amount of monthly impressions
            max_impressions:
                type: integer
                required: false
                displayName: Max Impressions
                description: Only return sites with less than this amount of monthly impressions
            min_uniques:
                type: integer
                required: false
                displayName: Min Uniques
                description: Only return sites with more than this amount of monthly unique visitors
            max_uniques:
                type: integer
                required: false
                displayName: Max Uniques
                description: Only return sites with less than this amount of monthly unique visitors
            publisher_id:
                type: integer
                required: false
                displayName: Publisher ID
                description: Only return sites belonging to the publisher ID.
            keywords:
                type: string
                required: false
                displayName: Keywords
                description: Search the name and description fields for these keywords. Multiple keywords separated by spaces.
        responses:
            200: # 200 = "OK"
                body:
                    application/json:
                        type: Response
            400: # 400 = "Bad Request" use for malformed requests
            401: # 401 = "Unauthorized" authentication has failed or was not provided
            403: # 403 = "Forbidden" authentication successful but insufficient permissions
            500: # 500
    put:
        (not_implemented): true
        is: [ auth_required ]
        description: Create a new site on the market. Will be subject to approval.
        body:
            type: SiteCreate
        responses:
            201: # 200 = "Created"
                body:
                    application/json:
                        type: Response
            400: # 400 = "Bad Request" use for malformed requests
            401: # 401 = "Unauthorized" authentication has failed or was not provided
            403: # 403 = "Forbidden" authentication successful but insufficient permissions
            500: # 500
    /{site_id}:
        uriParameters:
            site_id:
                type: integer
                required: true
                description: The unique identifier for a site.
                minimum: 1
                maximum: 16777215
        get:
            (not_implemented): true
            is: [ auth_required ] #?
            description: Retrieve a specific site by ID
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                404: # 404 = "Not found" provided site ID does not exist in the database
                500: # 500
        put:
            (not_implemented): true
            is: [ auth_required ]
            body:
                type: SiteCreate
                description: Update a site by ID
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                400: # 400 = "Bad Request" use for malformed requests
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                404: # 404 = "Not found" provided site ID does not exist in the database
                500: # 500
        delete:
            (not_implemented): true
            is: [ auth_required ]
            description: Delete a site.
            responses:
                200: # 200 = "OK"
                    body:
                        application/json:
                            type: Response
                401: # 401 = "Unauthorized" authentication has failed or was not provided
                403: # 403 = "Forbidden" authentication successful but insufficient permissions
                404: # 404 = "Not found" provided site ID does not exist in the database
                500: # 500
/users:
    /{user_id}:
        uriParameters:
            user_id:
                type: integer
                required: true
                description: The unique identifier of the user
                minimum: 1
                maximum: 16777215
        get:
            (not_implemented): true
            is: [ auth_required ]
            description: Retrieve contact information for a user by id.
            responses:
                200: # 200 = OK
                    body:
                        application/json:
                            type: Response
                404: # 404 = User not found.